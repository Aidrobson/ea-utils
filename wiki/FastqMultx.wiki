#summary One-sentence summary of this page.

= Introduction =

The ides behind this is to reduce the amount of "piping" going on in a pipeline.   A lot of time, disk space and nail-chewing is spent keeping files in sync, figuring out what barcodes are on what samples, etc.  The goal of this program is to make it easier to demultiplex possibly paired-end sequences, and also to allow the "guessing" of barcode sets based on master lists of barcoding protocols (fluidigm, truseq, etc.)

= Usage =

{{{
Usage: fastq-multx [-g|-l] <barcodes.fil> <read1.fq> -o r1.%.fq [mate.fq -o r2.%.fq] ...

Output files must contain a '%' sign which is replaced with the barcode id in the barcodes file.

Barcodes file looks like this:

<id1> <sequence1>
<id2> <sequence2> ...

Default is to guess the -bol or -eol based on clear stats.

If -g is used, then it's parameter is an index lane, and frequently occuring sequences are used.

If -l is used then all barcodes in the file are tried, and the *group* with the *most* matches is chosen.

Grouped barcodes file looks like this:

<id1> <sequence1> <group1>
<id1> <sequence1> <group1>
<id2> <sequence2> <group2>...

Mated reads, if supplied, are kept in-sync

Options:

-o FIL1 [FIL2]  Output files (one per input, required)
-g FIL          Determine barcodes from indexed read FIL
-l FIL          Determine barcodes from any read, using FIL as a master list
-b              Force beginning of line
-e              Force end of line
-x              Don't trim barcodes before writing
-n              Don't execute, just print likely barcode list
-v C            Verify that mated id's match up to character C ('/' for illumina)
-m N            Allow up to N mismatches, as long as they are unique
}}}